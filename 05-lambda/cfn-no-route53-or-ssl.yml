AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: OSCON Static Content Tutorial (Lesson 5)

Resources:

  Bucket:
    Type: AWS::S3::Bucket
    Properties:
      AccessControl: PublicRead
      WebsiteConfiguration:
        IndexDocument: index.html
        ErrorDocument: error.html

  BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref Bucket
      PolicyDocument:
        Statement:
          - Action:
            - s3:GetObject
            Effect: Allow
            Resource: !Sub "${Bucket.Arn}/*"
            Principal: "*"
          - Action:
            - s3:GetObject
            Effect: Deny
            Resource: !Sub "${Bucket.Arn}/secure/*"
            NotPrincipal:
              AWS: !Join ["", ["arn:aws:iam::cloudfront:user/CloudFront Origin Access Identity ", !Ref OriginAccessIdentity]]

  CloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Origins:
          - Id: S3Origin
            DomainName: !Select [1, !Split ['://', !GetAtt Bucket.WebsiteURL]]
            CustomOriginConfig:
              OriginProtocolPolicy: http-only
          - Id: S3SecureOrigin
            DomainName: !GetAtt Bucket.DomainName
            S3OriginConfig:
              OriginAccessIdentity: !Join ["", ["origin-access-identity/cloudfront/", !Ref OriginAccessIdentity]]
        Enabled: 'true'
        DefaultRootObject: index.html
        DefaultCacheBehavior:
          AllowedMethods:
          - GET
          - HEAD
          TargetOriginId: S3Origin
          ForwardedValues:
            QueryString: 'false'
            Cookies:
              Forward: none
          ViewerProtocolPolicy: allow-all
          Compress: true
        CacheBehaviors:
          - AllowedMethods:
            - GET
            - HEAD
            PathPattern: "/secure/*"
            ViewerProtocolPolicy: "allow-all"
            TargetOriginId: S3SecureOrigin
            ForwardedValues:
              QueryString: 'false'
              Cookies:
                Forward: none
            LambdaFunctionAssociations:
              - EventType: viewer-request
                LambdaFunctionARN: !Ref BasicAuthFunctionVersion
        PriceClass: PriceClass_100

  OriginAccessIdentity:
    Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: 'oscon-s3-secure'

  BasicAuthFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: basic_auth.handler
      Runtime: nodejs6.10
      CodeUri: basic_auth.zip
      Role: !GetAtt BasicAuthFunctionRole.Arn

  BasicAuthFunctionVersion:
    Type: "AWS::Lambda::Version"
    Properties:
      FunctionName: !Ref BasicAuthFunction

  BasicAuthFunctionRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "lambda.amazonaws.com"
                - "edgelambda.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
